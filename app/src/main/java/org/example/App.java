/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.client.codec.StringCodec;
import org.redisson.config.Config;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

import java.time.Duration;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws InterruptedException {

        Config config = new Config();
        config.setCodec(new StringCodec());
        config.setNettyThreads(8);
        config.useSingleServer().setAddress("redis://127.0.0.1:6379").setTimeout(500)
                .setConnectionMinimumIdleSize(1)
                .setConnectTimeout(500)
                .setPingConnectionInterval(100)
                .setKeepAlive(true)
                .setRetryAttempts(0)
                .setIdleConnectionTimeout(100)
                .setConnectionPoolSize(1);
        RedissonClient redissonClient = Redisson.create(config);

        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
        scheduler.scheduleAtFixedRate(() -> {
            if (!redissonClient.getNodesGroup().pingAll()) {
                System.err.println("Redis connection is down. Attempting to reconnect...");
                // Implement reconnection logic if needed
            } else {
                System.out.println("ping success");
            }
        }, 0, 10, TimeUnit.SECONDS);
        System.out.println(redissonClient.getBucket("test1").get());
            try {
                Flux.range(1, 1000).parallel().runOn(Schedulers.boundedElastic())
                        .flatMap(v -> {
                            return Mono.fromCompletionStage(redissonClient.getBucket("test" + v).setAsync("test" + v)
                                    .thenCompose(x -> redissonClient.getBucket("test" + v).getAsync()));
                        })
                        //.doOnNext(e -> System.out.println("success" + e))
                        .doOnError(e -> e.printStackTrace()).then().timeout(Duration.ofSeconds(100)).block();
            } catch (Exception e) {
                e.printStackTrace();
            }


        System.out.println("==== connection never recover");
        for (int i = 0; i< 1000; i++) {
            try {
                System.out.println(redissonClient.getBucket("test1").get());
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
